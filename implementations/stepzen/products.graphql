# Implementations of products subgraph for StepZen
#
# Provides hardcoded results just for the compatibility test.
#
# https://github.com/apollographql/apollo-federation-subgraph-compatibility/blob/main/CONTRIBUTORS.md
# "it is okay to return hardcoded results"

type Product @key(fields: "id") @key(fields: "sku package") {
  id: ID!
  sku: String
  package: String
  variation: ProductVariation
  dimensions: ProductDimension
  createdBy: User
  notes: String @tag(name: "internal")
  research: [ProductResearch!]!
}

type DeprecatedProduct @key(fields: "sku package") {
  sku: String!
  package: String!
  reason: String
  createdBy: User
}

type ProductVariation {
  id: ID!
}

type ProductResearch @key(fields: "study { caseNumber }") {
  study: CaseStudy!
  outcome: String
}

type CaseStudy {
  caseNumber: ID!
  description: String
}

type ProductDimension @shareable {
  size: String
  weight: Float
  unit: String @inaccessible
}

type Query {
  product(id: ID!): Product @sequence(steps: {query: "_product_data"})
  productBySku(sku: String, package: String): Product
    @sequence(steps: {query: "_product_data"})
  deprecatedProduct(sku: String!, package: String!): DeprecatedProduct @deprecated(reason: "Use product query instead")
    @rest(
      endpoint: "stepzen:empty"
      ecmascript: """
      function transformREST() {
        const deprecatedProduct = {
          sku: 'apollo-federation-v1',
          package: '@apollo/federation-v1',
          reason: 'Migrate to Federation V2',
        };
        if (get('sku') === deprecatedProduct.sku && get('package') === deprecatedProduct.package) {
          return JSON.stringify(deprecatedProduct);
        }
        return null;
      }
      """
   )
}

type User @key(fields: "email") {
  averageProductsCreatedPerYear: Int
    @materializer(query: "_averageProductsCreatedPerYear")
  email: ID! @external
  name: String @materializer(query: "nameFromEmail") @override(from: "users")
  totalProductsCreated: Int @external
  yearsOfEmployment: Int! @external
}

extend type Query {
  nameFromEmail(email: ID!): String
    @rest(
      endpoint: "stepzen:empty"
      ecmascript: """
      function transformREST() {
        if (get('email') == 'support@apollographql.com')
          return JSON.stringify('Jane Smith');
      }
      """
    )

  _averageProductsCreatedPerYear(
    totalProductsCreated: Int
    yearsOfEmployment: Int!
  ): Int
    @rest(
      endpoint: "stepzen:empty"
      ecmascript: """
      function transformREST() {
        return JSON.stringify(Math.round(get('totalProductsCreated') / get('yearsOfEmployment')));
      }
      """
    )
}

extend type Query {
  _product_data(id: ID, sku: String, package: String): Product
    @rest(
      endpoint: "stepzen:empty"
      ecmascript: """
      function transformREST() {
      	const products = {
      		'apollo-federation': {
      			sku: 'federation',
      			'package': '@apollo/federation',
      			variation: {
      				id: 'OSS'
      			},
      			dimensions: {
      				size: "small",
      				weight: 1,
      				unit: "kg"
      			},
      			createdBy: {
      				email: 'support@apollographql.com',
      				totalProductsCreated: 1337
      			},
                        research: [
                           {
                             study: {
                               caseNumber: "1234",
                               description: "Federation Study"
                             }
                           }
                        ],
      		},
      		'apollo-studio': {
      			sku: 'studio',
      			package: '',
      			variation: {
      				id: 'platform'
      			},
      			dimensions: {
      				size: "small",
      				weight: 1,
      				unit: "kg"
      			},
      			createdBy: {
      				email: 'support@apollographql.com',
      				totalProductsCreated: 1337
      			},
                        research: [
                           {
                             study: {
                               caseNumber: "1235",
                               description: "Studio Study"
                             }
                           }
                        ],
      		}
      	};
      	var id = get('id');
      	if (id !== undefined) {
      		const product = products[id];
      		if (product) {
      			return JSON.stringify(Object.assign({
      				id: id
      			}, product));
      		}
      		return null;
      	}
      	const sku = get('sku');
      	const pkg = get('package');
      	if (sku !== undefined && pkg != undefined) {
          const pids = Object.keys(products);
      		for (var i = 0; i < pids.length; i++) {
            id = pids[i];
      			const product = products[id];
      			if (product['sku'] == sku && product['package'] == pkg) {
      				return JSON.stringify(Object.assign({
      					id: id
      				}, product));
      			}
      		}
      		return null;
      	}
      	return null;
      }
      """
    )
}
